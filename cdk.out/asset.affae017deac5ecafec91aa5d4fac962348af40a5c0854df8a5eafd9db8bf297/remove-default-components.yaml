---
AWSTemplateFormatVersion: '2010-09-09'
Resources:
  CustomResourceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/delete-default-networking-components
      RetentionInDays: 30
  
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: '/'
      Policies:
      - PolicyName: custom-resource-execution-role-logging
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:DescribeLogGroup
            - logs:PutLogEvents
            Resource: !GetAtt CustomResourceLogGroup.Arn
      - PolicyName: custom-resource-execution-role-delete-sg
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeSecurityGroups
            - ec2:DeleteSecurityGroup
            Resource: '*'
  
  DeleteDefaultNetworkingComponents:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          # https://operatingops.com/2018/10/13/cloudformation-custom-resources-avoiding-the-two-hour-exception-timeout/
          import logging
          import cfnresponse
          import boto3
  
          def handler(event, context):
              logger = logging.getLogger()
              logger.setLevel(logging.INFO)
              try:
                  # Initialize EC2 client.
                  client = boto3.client('ec2')
                  # Pull the security group info for the account.
                  security_groups = client.describe_security_groups()
                  # Assign the name of the security group that will be deleted.
                  sg_name = 'test-sg'
                  # Loop through each security group to find the one that should be deleted.
                  for i in range(len(security_groups['SecurityGroups'])):
                      if security_groups['SecurityGroups'][i]['GroupName'] == sg_name:
                          delete_sg_response = client.delete_security_group(GroupName=sg_name)
                          logger.info(sg_name, 'has been deleted')
                      else:
                          print('Security group name not found')
                  logger.info('Exiting Successfully')
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception:
                  logger.exception('Signaling failure to CloudFormation.')
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      FunctionName: delete-default-networking-components
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 30
  
  CustomResource:
    Type: Custom::Function
    Properties:
      ServiceToken: !GetAtt DeleteDefaultNetworkingComponents.Arn